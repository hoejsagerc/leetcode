using System.Diagnostics.SymbolStore;

const string file = @"C:\Users\chris\dev\repos\leetcode\aoc\2023\csharp\day01\input.txt";
using var reader = new StreamReader(file);
List<string> stringNumbers = new List<string>()
{
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine"
};
int result1 = 0;
int result2 = 0;

var i = 0;
while (reader.ReadLine()! is { } line)
{
    Console.WriteLine($"line: {line} number: {i}");
    // Task1(line);
    Task2(line);
    i++;
}

Console.WriteLine($"Task 1 result: {result1}");
Console.WriteLine($"Task 2 result: {result2}");


void Task2(string line)
{
    var listOfDigits = new List<string>();
    var map = ParseStringForNumber(line);
    var chars = line.ToCharArray();

    for(int i = 0; i < chars.Length; i++)
    {
        if (Char.IsDigit(chars[i]))
        {
            var n = int.Parse(chars[i].ToString());
            map.Add(i, n);
        }
    }

    if (map.Count == 1)
    {
        listOfDigits.Add(map.First().Value.ToString());
        listOfDigits.Add(map.First().Value.ToString());
    }
    else
    {
        listOfDigits.Add(map.OrderBy(x => x.Key).First().Value.ToString());
        listOfDigits.Add(map.OrderBy(x => x.Key).Last().Value.ToString());
    }

    var number = ParseListOfDigits(listOfDigits);
    // Console.WriteLine($"line: {line}, num1: {listOfDigits[0]}, num2: {listOfDigits[1]}, number: {number}");
    result2 += number;
}


void Task1(string line)
{
    var listOfDigits = new List<string>();
    var chars = line.ToCharArray();
    foreach(var c in chars)
    {
        if (Char.IsDigit(c))
        {
            listOfDigits.Add(c.ToString());
        }
    }

    var number = ParseListOfDigits(listOfDigits);
    result1 += number;
}


int ParseListOfDigits(List<string> listOfDigits)
{
    if (listOfDigits.Count == 1)
    {
        return int.Parse($"{listOfDigits[0]}{listOfDigits[0]}");
    }

    return int.Parse($"{listOfDigits[0]}{listOfDigits[listOfDigits.Count -1]}");
}


int MatchNumber(string number) =>
    number switch
    {
        "one" => 1,
        "two" => 2,
        "three" => 3,
        "four" => 4,
        "five" => 5,
        "six" => 6,
        "seven" => 7,
        "eight" => 8,
        "nine" => 9,
        _ => throw new ArgumentException("Failed finding pattern matching", nameof(number))
    };


Dictionary<int, int> ParseStringForNumber(string line)
{
    var dict = new Dictionary<int, int>();

    foreach(var s in stringNumbers)
    {
        if(line.ToLower().Contains(s))
        {
            int index = line.IndexOf(s);
            var number = MatchNumber(s);
            dict.Add(index, number);
        }
    }

    return dict;
}